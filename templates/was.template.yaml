AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This WAS template deploys an ASG behind an ELB load balancer in two private
  subnets. The cluster is configured to use an S3 bucket for storage **WARNING** This
  template creates EC2 instances and related resources. You will be billed for the
  AWS resources used if you create a stack from this template. (qs-1r4dcoiij)
Metadata:
  cfn-lint: { config: { ignore_checks: [W9002, W9003, W9006, W2001, E9010] } }
  AWSAMIRegionMap:
    Filters:
      RHELHVM:
        name: RHEL-7.6_HVM-????????-x86_64-?-Hourly2-GP2
        owner-id: '309956199498'
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PublicSubnet1ID
          - PublicSubnet2ID
      - Label:
          default: Bastion Host Details
        Parameters:
          - KeyPairName
          - BastionSecurityGroupID
      - Label:
          default: WAS Nodes Configuration
        Parameters:
          - WASInstanceType
          - WASNodesMinSize
          - WASNodesMaxSize
          - WASNodesDesiredCapacity
          - WebAccessCIDR
          - DeployModules
      - Label:
          default: SSL Configuration
        Parameters:
          - ALBSSLCertificateARN
          - SiteDomain
          - Route53HostedZoneId
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
      - Label:
          default: Oracle RDS Configuration
        Parameters:
          - DBName
          - DBUser
          - DBPassword
          - EndpointAddress
          - EndpointPort
          - MaximoFilesLocation
          - OracleServerAccessSecurityGroup
    ParameterLabels:
      ALBSSLCertificateARN:
        default: ARN of ACM certificate for Application Load Balancer
      SiteDomain:
        default: Maximo site domain
      Route53HostedZoneId:
        default: Route 53 hosted zone ID
      BastionSecurityGroupID:
        default: Bastion Security Group ID
      KeyPairName:
        default: SSH Key Name
      WASInstanceType:
        default: WAS Servers Instance Type
      WASNodesDesiredCapacity:
        default: WAS Nodes Desired Capacity
      WASNodesMaxSize:
        default: WAS Nodes Max Size
      WASNodesMinSize:
        default: WAS Nodes Min Size
      WebAccessCIDR:
        default: Allowed Maximo Web External Access CIDR
      DeployModules:
        default: Deploy utilities modules along with Maximo ?
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PublicSubnet1ID:
        default: Public Subnet 1 ID
      PublicSubnet2ID:
        default: Public Subnet 2 ID
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      DBName:
        default: The database name
      DBUser:
        default: The database admin account username
      DBPassword:
        default: The database admin account password
      OracleServerAccessSecurityGroup:
        default: Oracle Security Group ID
      EndpointAddress:
        default: Endpoint address of the primary database
      EndpointPort:
        default: Endpoint port number of the primary database
      VPCID:
        default: VPC ID
Parameters:
  ALBSSLCertificateARN:
    Default: ''
    Description: '[Optional] The ARN of the SSL certificate to be used for the Application
      Load Balancer'
    Type: String
  SiteDomain:
    Description:  "[Optional] Domain name of the maximo site. e.g. maximo.example.com.
        Valid FQDN required when using SSL."
    AllowedPattern: (?!-)[a-zA-Z0-9-.]*(?<!-)
    ConstraintDescription: Must be a valid fully-qualified domain name.
    Type: String
    Default: ""
  Route53HostedZoneId:
    Description:  "[Optional] Route53 Hosted Zone ID where DNS record for Maximo
        will be added."
    Type: String
    Default: ""
  BastionSecurityGroupID:
    Description: ID of the bastion host security group to enable SSH connections (e.g.,
      sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  KeyPairName:
    Description: Name of an existing EC2 key pair. All instances will launch with
      this key pair.
    Type: AWS::EC2::KeyPair::KeyName
  WASInstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
    ConstraintDescription: Must contain valid instance type
    Default: m5.xlarge
    Description: Type of EC2 instance for the WAS instances
    Type: String
  WASNodesDesiredCapacity:
    Default: '2'
    Description: The desired capacity for the WAS nodes Auto Scaling group
    Type: String
  WASAdminUsername:
    Description: The user name of the WAS administrator
    Default: wasadmin
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  WASAdminPassword:
    Description: The password of the WAS administrator
    Type: String
    NoEcho: 'true'
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  WASNodesMaxSize:
    Default: '4'
    Description: The maximum size of the Auto Scaling group
    Type: String
  WASNodesMinSize:
    Default: '2'
    Description: The minimum size of the Auto Scaling group
    Type: String
  WebAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access the Maximo URL. We recommend
      that you set this value to a trusted IP range.
    Type: String
  DeployModules:
    AllowedValues:
      - 'Core'
      - 'Energy-and-Utilities'
      - 'HSE'
      - 'Nuclear'
      - 'Scheduler'
      - 'Transportation'
    ConstraintDescription: Choose the IBM Maximo module to deploy.
    Default: 'Core'
    Description: Choose the IBM Maximo module to deploy. The respective binaries must be placed in the root key prefix as defined by MaximoFilesLocation.
      In addition, for HSE module to work, you must additionally upload the latest hotfix to s3://MaximoFilesLocation/HSE/latest_hotfix.zip.
    Type: String
  PrivateSubnet1ID:
    Description: ID of private subnet 1 in Availability Zone 1 for the WAS (e.g.,
      subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2ID:
    Description: ID of private subnet 2 in Availability Zone 2 for the WAS (e.g.,
      subnet-b1f432cd)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet1ID:
    Description: ID of public subnet 1 in Availability Zone 1 for the ELB load balancer
      (e.g., subnet-9bc642ac)
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Description: ID of public subnet 2 in Availability Zone 2 for the ELB load balancer
      (e.g., subnet-e3246d8e)
    Type: AWS::EC2::Subnet::Id
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-ibm-websphere-was/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  VPCID:
    Description: ID of your existing VPC for deployment
    Type: AWS::EC2::VPC::Id
  DBName:
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '8'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  EndpointAddress:
    Description: Endpoint address of the primary database
    Type: String
  EndpointPort:
    Description: Endpoint port number of the primary database
    Type: String
  MaximoFilesLocation:
    Description: Provide the S3 location of the downloaded Maximo, WAS, and Oracle client files (do not include the s3:// and the trailing forward slash).
      E.g., if the location is "s3://ibm-maximo-assets/instllation_files", then enter "ibm-maximo-assets/instllation_files".
      Refer to the deployment guide for more information on downloading the client files and obtaining the location.
    Type: String
  OracleServerAccessSecurityGroup:
    Description: ID of the bastion host security group to enable SSH connections (e.g.,
      sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  UseALBSSL: !Not
    - !Equals
      - !Ref 'ALBSSLCertificateARN'
      - ''
  MaximoDomainRoute53Condition:
    Fn::And:
      - Fn::Not:
          - Fn::Equals:
              - Ref: SiteDomain
              - ""
      - Fn::Not:
          - Fn::Equals:
              - Ref: Route53HostedZoneId
              - ""
Mappings:
  AWSAMIRegionMap:
    AMI:
      # RHELHVM: RHEL-7.2_HVM_GA-20151112-x86_64-1-Hourly2-GP2
      RHELHVM: RHEL-7.6_HVM-????????-x86_64-?-Hourly2-GP2
    ap-northeast-1:
      RHELHVM: ami-0e3e6ca71a19ccf06
    ap-northeast-2:
      RHELHVM: ami-0f84aff229263c1fc
    ap-southeast-1:
      RHELHVM: ami-031290b4bd9eaa715
    ap-southeast-2:
      RHELHVM: ami-06d2821bfc76dcda3
    ca-central-1:
      RHELHVM: ami-0a43efe505004e592
    eu-central-1:
      RHELHVM: ami-0fc86555914f6a9f2
    eu-west-1:
      RHELHVM: ami-04c89a19fea29f1f0
    eu-west-2:
      RHELHVM: ami-06fe0c124aedcef5f
    sa-east-1:
      RHELHVM: ami-06efd558d6a5fb959
    us-east-1:
      RHELHVM: ami-08a7d2bfef687328f
    us-east-2:
      RHELHVM: ami-0e166e72fda655c63
    us-west-1:
      RHELHVM: ami-056efb42b219f9abb
    us-west-2:
      RHELHVM: ami-02deb4589e0f0d95e
    us-gov-west-1:
      RHELHVM: ami-5a740e3b
    us-gov-east-1:
      RHELHVM: ami-9ec32eef

Resources:
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the ELB
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - !If
          - UseALBSSL
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Ref 'WebAccessCIDR'
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Ref 'WebAccessCIDR'
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref 'PublicSubnet1ID'
        - !Ref 'PublicSubnet2ID'
      SecurityGroups:
        - !Ref 'ELBSecurityGroup'
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'AppALBTargetGroup'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: !If
        - UseALBSSL
        - 443
        - 80
      Protocol: !If
        - UseALBSSL
        - HTTPS
        - HTTP
      Certificates:
        - !If
          - UseALBSSL
          - CertificateArn: !Ref 'ALBSSLCertificateARN'
          - !Ref 'AWS::NoValue'
  AppALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPath: /maximo
      Matcher:
        HttpCode: '200,302'
      Port: !If
        - UseALBSSL
        - 9443
        - 9080
      Protocol: !If
        - UseALBSSL
        - HTTPS
        - HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VPCID'
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '1800'
  DMGRALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      HealthCheckPath: /ibm/console
      Matcher:
        HttpCode: '200,302'
      Port: 9063
      Protocol: HTTPS
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VPCID'
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'
  WASRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${MaximoFilesLocation}/*'
                Effect: Allow
              - Action: ["ec2:DescribeStoreImageTasks", "ec2:DescribeReplaceRootVolumeTasks"]
                Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:*"
                Effect: Allow
              - Action: ["ec2:DescribeNetworkInterfaceAttribute", "ec2:DescribeCapacityReservations", "ec2:DescribeSpotFleetInstances", "ec2:DescribeFpgaImageAttribute", "ec2:DescribeVpcEndpointServicePermissions", "ec2:DescribeStaleSecurityGroups", "ec2:DescribeSpotDatafeedSubscription", "ec2:DescribeFleets", "ec2:DescribeVpnConnections", "ec2:DescribeLocalGatewayRouteTableVpcAssociations", "ec2:DescribeAddressesAttribute", "ec2:DescribeHosts", "ec2:DescribeKeyPairs", "ec2:DescribeIamInstanceProfileAssociations", "ec2:DescribeManagedPrefixLists", "ec2:DescribeImportSnapshotTasks", "ec2:DescribeEgressOnlyInternetGateways", "ec2:DescribeVpcEndpointConnections", "ec2:DescribeClientVpnRoutes", "ec2:DescribeNetworkAcls", "ec2:DescribeImages", "ec2:DescribeTransitGatewayPeeringAttachments", "ec2:DescribeVolumeStatus", "ec2:DescribeVpcEndpointServiceConfigurations", "ec2:DescribeSnapshots", "ec2:DescribeFlowLogs", "ec2:DescribeExportImageTasks", "ec2:DescribePrincipalIdFormat", "ec2:DescribeByoipCidrs", "ec2:DescribeImageAttribute", "ec2:DescribeSecurityGroups", "ec2:DescribeIpv6Pools", "ec2:DescribeScheduledInstances", "ec2:DescribeReservedInstancesListings", "ec2:DescribeSubnets", "ec2:DescribeInstanceEventNotificationAttributes", "ec2:DescribeInstanceStatus", "ec2:DescribeScheduledInstanceAvailability", "ec2:DescribeReservedInstancesModifications", "ec2:DescribeAccountAttributes", "ec2:DescribeInternetGateways", "ec2:DescribePublicIpv4Pools", "ec2:DescribeRouteTables", "ec2:DescribeLocalGatewayVirtualInterfaces", "ec2:DescribeNetworkInterfaces", "ec2:DescribeSpotInstanceRequests", "ec2:DescribeVolumesModifications", "ec2:DescribeMovingAddresses", "ec2:DescribeVpcs", "ec2:DescribeClientVpnTargetNetworks", "ec2:DescribeNetworkInsightsPaths", "ec2:DescribeFpgaImages", "ec2:DescribeInstances", "ec2:DescribeAggregateIdFormat", "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", "ec2:DescribeTrafficMirrorFilters", "ec2:DescribeSpotFleetRequests", "ec2:DescribeExportTasks", "ec2:DescribeFastSnapshotRestores", "ec2:DescribeLaunchTemplateVersions", "ec2:DescribeSpotPriceHistory", "ec2:DescribeNetworkInterfacePermissions", "ec2:DescribeHostReservations", "ec2:DescribeVolumes", "ec2:DescribeLocalGateways", "ec2:DescribeLaunchTemplates", "ec2:DescribeInstanceTypeOfferings", "ec2:DescribeDhcpOptions", "ec2:DescribeNatGateways", "ec2:DescribeRegions", "ec2:DescribeIdFormat", "ec2:DescribeConversionTasks", "ec2:DescribeVolumeAttribute", "ec2:DescribeClientVpnEndpoints", "ec2:DescribeReservedInstancesOfferings", "ec2:DescribeTransitGatewayConnectPeers", "ec2:DescribeTransitGatewayAttachments", "ec2:DescribeFleetHistory", "ec2:DescribeInstanceCreditSpecifications", "ec2:DescribeVpcEndpoints", "ec2:DescribeVpcClassicLinkDnsSupport", "ec2:DescribeElasticGpus", "ec2:DescribeVpcClassicLink", "ec2:DescribeClientVpnAuthorizationRules", "ec2:DescribeLocalGatewayRouteTables", "ec2:DescribeTransitGatewayRouteTables", "ec2:DescribeClientVpnConnections", "ec2:DescribeTransitGatewayMulticastDomains", "ec2:DescribeSpotFleetRequestHistory", "ec2:DescribeAvailabilityZones", "ec2:DescribeCarrierGateways", "ec2:DescribeFleetInstances", "ec2:DescribeClassicLinkInstances", "ec2:DescribeTransitGatewayVpcAttachments", "ec2:DescribeSnapshotAttribute", "ec2:DescribeNetworkInsightsAnalyses", "ec2:DescribeVpnGateways", "ec2:DescribeVpcEndpointServices", "ec2:DescribeImportImageTasks", "ec2:DescribeTransitGatewayConnects", "ec2:DescribeTrafficMirrorSessions", "ec2:DescribeCustomerGateways", "ec2:DescribeTrafficMirrorTargets", "ec2:DescribeInstanceTypes", "ec2:DescribePrefixLists", "ec2:DescribeSecurityGroupReferences", "ec2:DescribeVpcAttribute", "ec2:DescribeTags", "ec2:DescribeReservedInstances", "ec2:DescribeVpcEndpointConnectionNotifications", "ec2:DescribeVpcPeeringConnections", "ec2:DescribeCoipPools", "ec2:DescribePlacementGroups", "ec2:DescribeAddresses", "ec2:DescribeIdentityIdFormat", "ec2:DescribeHostReservationOfferings", "ec2:DescribeTransitGateways", "ec2:DescribeInstanceAttribute", "ec2:DescribeBundleTasks", "ec2:DescribeLocalGatewayVirtualInterfaceGroups"]
                Resource: "*"
                Effect: Allow
              - Action: ["elasticloadbalancing:DescribeListenerCertificates", "elasticloadbalancing:DescribeTargetHealth", "elasticloadbalancing:DescribeListeners", "elasticloadbalancing:DescribeRules", "elasticloadbalancing:DescribeLoadBalancerAttributes", "elasticloadbalancing:DescribeSSLPolicies", "elasticloadbalancing:DescribeLoadBalancers", "elasticloadbalancing:DescribeAccountLimits", "elasticloadbalancing:DescribeTargetGroupAttributes", "elasticloadbalancing:DescribeTargetGroups"]
                Resource: '*'
                Effect: Allow
              - Action: ["elasticloadbalancing:DescribeInstanceHealth", "elasticloadbalancing:DescribeLoadBalancerPolicies", "elasticloadbalancing:DescribeLoadBalancerPolicyTypes", "elasticloadbalancing:DescribeTags"]
                Resource: !Sub 'arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:*'
                Effect: Allow
              - Action: ["autoscaling:DescribeWarmPool"]
                Resource: !Sub "arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:*"
                Effect: Allow
              - Action: ["autoscaling:DescribeAccountLimits", "autoscaling:DescribeAdjustmentTypes", "autoscaling:DescribeAutoScalingGroups", "autoscaling:DescribeAutoScalingInstances", "autoscaling:DescribeAutoScalingNotificationTypes", "autoscaling:DescribeInstanceRefreshes", "autoscaling:DescribeLaunchConfigurations", "autoscaling:DescribeLifecycleHooks", "autoscaling:DescribeLifecycleHookTypes", "autoscaling:DescribeLoadBalancers", "autoscaling:DescribeLoadBalancerTargetGroups", "autoscaling:DescribeMetricCollectionTypes", "autoscaling:DescribeNotificationConfigurations", "autoscaling:DescribePolicies", "autoscaling:DescribeScalingActivities", "autoscaling:DescribeScalingProcessTypes", "autoscaling:DescribeScheduledActions", "autoscaling:DescribeTags", "autoscaling:DescribeTerminationPolicyTypes"]
                Resource: "*"
                Effect: Allow
          PolicyName: aws-quick-start-maximo-policy
  WASDMGRRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
                Effect: Allow
              - Action:
                  - s3:GetObject
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${MaximoFilesLocation}/*'
                Effect: Allow
              - Action:
                  - ssm:DescribeParameters
                Resource: '*'
                Effect: Allow
              - Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/maximo-*'
                Effect: Allow
              - Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${WASSSMParameter}'
                Effect: Allow
              - Action: [ "ec2:DescribeNetworkInterfaceAttribute", "ec2:DescribeCapacityReservations", "ec2:DescribeSpotFleetInstances", "ec2:DescribeFpgaImageAttribute", "ec2:DescribeVpcEndpointServicePermissions", "ec2:DescribeStaleSecurityGroups", "ec2:DescribeSpotDatafeedSubscription", "ec2:DescribeFleets", "ec2:DescribeVpnConnections", "ec2:DescribeLocalGatewayRouteTableVpcAssociations", "ec2:DescribeAddressesAttribute", "ec2:DescribeHosts", "ec2:DescribeKeyPairs", "ec2:DescribeIamInstanceProfileAssociations", "ec2:DescribeManagedPrefixLists", "ec2:DescribeImportSnapshotTasks", "ec2:DescribeEgressOnlyInternetGateways", "ec2:DescribeVpcEndpointConnections", "ec2:DescribeClientVpnRoutes", "ec2:DescribeNetworkAcls", "ec2:DescribeImages", "ec2:DescribeTransitGatewayPeeringAttachments", "ec2:DescribeVolumeStatus", "ec2:DescribeVpcEndpointServiceConfigurations", "ec2:DescribeSnapshots", "ec2:DescribeFlowLogs", "ec2:DescribeExportImageTasks", "ec2:DescribePrincipalIdFormat", "ec2:DescribeByoipCidrs", "ec2:DescribeImageAttribute", "ec2:DescribeSecurityGroups", "ec2:DescribeIpv6Pools", "ec2:DescribeScheduledInstances", "ec2:DescribeReservedInstancesListings", "ec2:DescribeSubnets", "ec2:DescribeInstanceEventNotificationAttributes", "ec2:DescribeInstanceStatus", "ec2:DescribeScheduledInstanceAvailability", "ec2:DescribeReservedInstancesModifications", "ec2:DescribeAccountAttributes", "ec2:DescribeStoreImageTasks", "ec2:DescribeInternetGateways", "ec2:DescribePublicIpv4Pools", "ec2:DescribeRouteTables", "ec2:DescribeLocalGatewayVirtualInterfaces", "ec2:DescribeNetworkInterfaces", "ec2:DescribeSpotInstanceRequests", "ec2:DescribeVolumesModifications", "ec2:DescribeMovingAddresses", "ec2:DescribeReplaceRootVolumeTasks", "ec2:DescribeVpcs", "ec2:DescribeClientVpnTargetNetworks", "ec2:DescribeNetworkInsightsPaths", "ec2:DescribeFpgaImages", "ec2:DescribeInstances", "ec2:DescribeAggregateIdFormat", "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", "ec2:DescribeTrafficMirrorFilters", "ec2:DescribeSpotFleetRequests", "ec2:DescribeExportTasks", "ec2:DescribeFastSnapshotRestores", "ec2:DescribeLaunchTemplateVersions", "ec2:DescribeSpotPriceHistory", "ec2:DescribeNetworkInterfacePermissions", "ec2:DescribeHostReservations", "ec2:DescribeVolumes", "ec2:DescribeLocalGateways", "ec2:DescribeLaunchTemplates", "ec2:DescribeInstanceTypeOfferings", "ec2:DescribeDhcpOptions", "ec2:DescribeNatGateways", "ec2:DescribeRegions", "ec2:DescribeIdFormat", "ec2:DescribeConversionTasks", "ec2:DescribeVolumeAttribute", "ec2:DescribeClientVpnEndpoints", "ec2:DescribeReservedInstancesOfferings", "ec2:DescribeTransitGatewayConnectPeers", "ec2:DescribeTransitGatewayAttachments", "ec2:DescribeFleetHistory", "ec2:DescribeInstanceCreditSpecifications", "ec2:DescribeVpcEndpoints", "ec2:DescribeVpcClassicLinkDnsSupport", "ec2:DescribeElasticGpus", "ec2:DescribeVpcClassicLink", "ec2:DescribeClientVpnAuthorizationRules", "ec2:DescribeLocalGatewayRouteTables", "ec2:DescribeTransitGatewayRouteTables", "ec2:DescribeClientVpnConnections", "ec2:DescribeTransitGatewayMulticastDomains", "ec2:DescribeSpotFleetRequestHistory", "ec2:DescribeAvailabilityZones", "ec2:DescribeCarrierGateways", "ec2:DescribeFleetInstances", "ec2:DescribeClassicLinkInstances", "ec2:DescribeTransitGatewayVpcAttachments", "ec2:DescribeSnapshotAttribute", "ec2:DescribeNetworkInsightsAnalyses", "ec2:DescribeVpnGateways", "ec2:DescribeVpcEndpointServices", "ec2:DescribeImportImageTasks", "ec2:DescribeTransitGatewayConnects", "ec2:DescribeTrafficMirrorSessions", "ec2:DescribeCustomerGateways", "ec2:DescribeTrafficMirrorTargets", "ec2:DescribeInstanceTypes", "ec2:DescribePrefixLists", "ec2:DescribeSecurityGroupReferences", "ec2:DescribeVpcAttribute", "ec2:DescribeTags", "ec2:DescribeReservedInstances", "ec2:DescribeVpcEndpointConnectionNotifications", "ec2:DescribeVpcPeeringConnections", "ec2:DescribeCoipPools", "ec2:DescribePlacementGroups", "ec2:DescribeAddresses", "ec2:DescribeIdentityIdFormat", "ec2:DescribeHostReservationOfferings", "ec2:DescribeTransitGateways", "ec2:DescribeInstanceAttribute", "ec2:DescribeBundleTasks", "ec2:DescribeLocalGatewayVirtualInterfaceGroups" ]
                Resource: !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:*"
                Effect: Allow
              - Action: [ "elasticloadbalancing:DescribeListenerCertificates", "elasticloadbalancing:DescribeTargetHealth", "elasticloadbalancing:DescribeListeners", "elasticloadbalancing:DescribeRules", "elasticloadbalancing:DescribeLoadBalancerAttributes", "elasticloadbalancing:DescribeSSLPolicies", "elasticloadbalancing:DescribeLoadBalancers", "elasticloadbalancing:DescribeInstanceHealth", "elasticloadbalancing:DescribeLoadBalancerPolicies", "elasticloadbalancing:DescribeLoadBalancerPolicyTypes", "elasticloadbalancing:DescribeAccountLimits", "elasticloadbalancing:DescribeTargetGroupAttributes", "elasticloadbalancing:DescribeTags", "elasticloadbalancing:DescribeTargetGroups" ]
                Resource: !Sub 'arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:*'
                Effect: Allow
              - Action: ["autoscaling:DescribeWarmPool"]
                Resource: !Sub "arn:${AWS::Partition}:autoscaling:${AWS::Region}:${AWS::AccountId}:*"
                Effect: Allow
              - Action: ["autoscaling:DescribeAccountLimits", "autoscaling:DescribeAdjustmentTypes", "autoscaling:DescribeAutoScalingGroups", "autoscaling:DescribeAutoScalingInstances", "autoscaling:DescribeAutoScalingNotificationTypes", "autoscaling:DescribeInstanceRefreshes", "autoscaling:DescribeLaunchConfigurations", "autoscaling:DescribeLifecycleHooks", "autoscaling:DescribeLifecycleHookTypes", "autoscaling:DescribeLoadBalancers", "autoscaling:DescribeLoadBalancerTargetGroups", "autoscaling:DescribeMetricCollectionTypes", "autoscaling:DescribeNotificationConfigurations", "autoscaling:DescribePolicies", "autoscaling:DescribeScalingActivities", "autoscaling:DescribeScalingProcessTypes", "autoscaling:DescribeScheduledActions", "autoscaling:DescribeTags", "autoscaling:DescribeTerminationPolicyTypes"]
                Resource: "*"
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
  WASProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'WASRole'
  WASDMGRProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'WASDMGRRole'
  WASSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the WAS DMGR & APPServer instances
      VpcId: !Ref 'VPCID'
      SecurityGroupIngress:
        - !If
          - UseALBSSL
          - IpProtocol: tcp
            FromPort: 9443
            ToPort: 9443
            SourceSecurityGroupId: !Ref 'ELBSecurityGroup'
          - IpProtocol: tcp
            FromPort: 9080
            ToPort: 9080
            SourceSecurityGroupId: !Ref 'ELBSecurityGroup'
        - IpProtocol: tcp
          FromPort: 9063
          ToPort: 9063
          SourceSecurityGroupId: !Ref 'ELBSecurityGroup'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref 'BastionSecurityGroupID'
  WASSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref WASSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref WASSecurityGroup
  WASSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String 
      Value:  'Started'
      Description:  'Parameter store keys related to maximo deployment'
  WASDMGROracleSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref OracleServerAccessSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref EndpointPort
      ToPort: !Ref EndpointPort
      SourceSecurityGroupId: !Ref WASSecurityGroup
  WASDMGRASLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W4002
          ignore_reasons:
            W4002: Password is not logged but is necessary to be passed to Maximo installation scripts
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref 'WASDMGRRole'
          buckets: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - install
          quickstartwithSSL:
            - install
        install:
          files:
            /home/ec2-user/DeployApplications.py:
              source:
                !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/DeployApplications.py'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
            /home/ec2-user/maximo_was_dmgr_commands.sh:
              source:
                !Sub
                - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/maximo_was_dmgr_commands.sh'
                - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                  S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000700'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            '01_create_Server':
              command: !Sub |
                sudo sh /home/ec2-user/maximo_was_dmgr_commands.sh  ${EndpointAddress} ${EndpointPort} ${DBName} ${MaximoFilesLocation} ${DeployModules} ${WASAdminUsername} ${WASAdminPassword} ${WASSSMParameter} &> /tmp/install.txt
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RHELHVM
      InstanceMonitoring: true
      IamInstanceProfile: !Ref 'WASDMGRProfile'
      InstanceType: !Ref 'WASInstanceType'
      SecurityGroups:
        - !Ref 'WASSecurityGroup'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 40
            VolumeType: gp2
            Encrypted: true
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          yum install -y git
          until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git; do echo "Retrying"; done
          cd /quickstart-linux-utilities
          source quickstart-cfn-tools.source
          qs_update-os || qs_err
          qs_bootstrap_pip || qs_err
          qs_aws-cfn-bootstrap || qs_err
          cfn-init  --stack ${AWS::StackName} --resource WASDMGRASLaunchConfig --configsets quickstart --region ${AWS::Region}
          cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource WASDMGRAutoScalingGroup
  WASDMGRTargetTrackingScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'WASDMGRAutoScalingGroup'
      Cooldown: '60'
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 75
  WASDMGRAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
      Cooldown: '300'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref 'DMGRALBTargetGroup'
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref 'WASDMGRASLaunchConfig'
      MaxSize:  '1'
      MinSize:  '1'
      Tags:
        - Key: Name
          Value: WAS DMGR Server node
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT3H
  WASAppASLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref 'WASRole'
          buckets: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      AWS::CloudFormation::Init:
        configSets:
          quickstart:
            - install
          quickstartwithSSL:
            - install
        install:
          files:
            /home/ec2-user/CreateAppServer.py:
              source:
                !Sub
                  - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/CreateAppServer.py'
                  - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                    S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000755'
              owner: root
              group: root
              authentication: S3AccessCreds
            /home/ec2-user/maximo_was_appserver_commands.sh:
              source:
                !Sub
                  - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}scripts/maximo_was_appserver_commands.sh'
                  - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
                    S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              mode: '000700'
              owner: root
              group: root
              authentication: S3AccessCreds
          commands:
            '01_create_Server':
              command: !Sub
                - 'sudo sh /home/ec2-user/maximo_was_appserver_commands.sh  ${MaximoFilesLocation}  ${DMGRASGroupName} ${WASAdminUsername} ${WASAdminPassword} &> /tmp/install.txt'
                - DMGRASGroupName:  !Ref 'WASDMGRAutoScalingGroup'
    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - RHELHVM
      InstanceMonitoring: true
      IamInstanceProfile: !Ref 'WASProfile'
      InstanceType: !Ref 'WASInstanceType'
      SecurityGroups:
        - !Ref 'WASSecurityGroup'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 40
            VolumeType: gp2
            Encrypted: true
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          yum install -y git
          until git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git; do echo "Retrying"; done
          cd /quickstart-linux-utilities
          source quickstart-cfn-tools.source
          qs_update-os || qs_err
          qs_bootstrap_pip || qs_err
          qs_aws-cfn-bootstrap || qs_err
          cfn-init  --stack ${AWS::StackName} --resource WASAppASLaunchConfig --configsets quickstart --region ${AWS::Region}
          cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource WASAppAutoScalingGroup
  WASAppTargetTrackingScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref 'WASAppAutoScalingGroup'
      Cooldown: '60'
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 75
  WASAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref 'PrivateSubnet1ID'
        - !Ref 'PrivateSubnet2ID'
      Cooldown: '300'
      DesiredCapacity: !Ref 'WASNodesDesiredCapacity'
      TargetGroupARNs:
        - !Ref 'AppALBTargetGroup'
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref 'WASAppASLaunchConfig'
      MaxSize: !Ref 'WASNodesMaxSize'
      MinSize: !Ref 'WASNodesMinSize'
      Tags:
        - Key: Name
          Value: WAS Application Server cluster node
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref 'WASNodesDesiredCapacity'
        Timeout: PT1H
  MaximoDomainRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: MaximoDomainRoute53Condition
    Properties:
      Name: !Ref  'SiteDomain'
      Type: A
      HostedZoneId: !Ref 'Route53HostedZoneId'
      AliasTarget:
        DNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt 'ApplicationLoadBalancer.CanonicalHostedZoneID'


Outputs:
  WebsiteURL:
    Description: URL for newly created WAS stack
    Value:  !Sub
      - '${AppScheme}://${AppDomain}/maximo'
      - AppScheme: !If [UseALBSSL, 'https', 'http']
        AppDomain: !If [MaximoDomainRoute53Condition, !Ref 'SiteDomain', !GetAtt 'ApplicationLoadBalancer.DNSName']


